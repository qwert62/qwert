#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

int main() {
    int tracks, ShiftTime, queueSize, initPos, dir;
    
    cout << "Enter the Total Number of tracks: ";
    cin >> tracks;
    
    cout << "Enter the Time taken by the head to move one track to another: ";
    cin >> ShiftTime;
    
    cout << "Enter the Size of Request Queue: ";
    cin >> queueSize;
    
    vector<int> requestQueue(queueSize);
    
    cout << "Enter the initial position of read-write head: ";
    cin >> initPos;
    
    cout << "Enter the requested Tracks: ";
    for (int i = 0; i < queueSize; i++) {
        cin >> requestQueue[i];
    }
    
    cout << "Select Direction: \n1)Current to Max\n2)Current to Min\n";
    cin >> dir;
    
    sort(requestQueue.begin(), requestQueue.end());
    
    int min = 0, max = 0;
    int Total_SeekTime = 0;
    
    cout << "Request Queue: ";
    for (int i = 0; i < queueSize; i++) {
        cout << requestQueue[i] << " ";
    }
    cout << endl;

    for (int i = 0; i < queueSize; i++) {
        if (requestQueue[i] > initPos) {
            min = i - 1;
            max = i;
            break;
        }
    }
    
    cout << "||\tCurrent Position\t||\tFinal Position\t\t||\tSeek Time\t\t||" << endl;
    
    if (dir == 2) {
        // Current to Min direction
        for (int i = min; i >= 0; i--) {
            int finalPos = requestQueue[i];
            if (finalPos >= tracks) {
                cout << "Track " << finalPos << " Not Available" << endl;
            } else {
                int SeekTime = abs(finalPos - initPos) * ShiftTime;
                cout << "||\t\t" << initPos << "\t\t||\t\t" << finalPos << "\t\t||\t\t" << SeekTime << "\t\t||" << endl;
                Total_SeekTime += SeekTime;
                initPos = finalPos;
            }
            if (i == 0) {
                finalPos = 0;
                int SeekTime = abs(finalPos - initPos) * ShiftTime;
                cout << "||\t\t" << initPos << "\t\t||\t\t" << finalPos << "\t\t||\t\t" << SeekTime << "\t\t||" << endl;
                Total_SeekTime += SeekTime;
                initPos = finalPos;
            }
        }
        for (int i = max; i < queueSize; i++) {
            int finalPos = requestQueue[i];
            if (finalPos >= tracks) {
                cout << "Track " << finalPos << " Not Available" << endl;
            } else {
                int SeekTime = abs(finalPos - initPos) * ShiftTime;
                cout << "||\t\t" << initPos << "\t\t||\t\t" << finalPos << "\t\t||\t\t" << SeekTime << "\t\t||" << endl;
                Total_SeekTime += SeekTime;
                initPos = finalPos;
            }
        }
    } else {
        // Current to Max direction
        for (int i = max; i < queueSize; i++) {
            int finalPos = requestQueue[i];
            if (finalPos >= tracks) {
                cout << "Track " << finalPos << " Not Available" << endl;
            } else {
                int SeekTime = abs(finalPos - initPos) * ShiftTime;
                cout << "||\t\t" << initPos << "\t\t||\t\t" << finalPos << "\t\t||\t\t" << SeekTime << "\t\t||" << endl;
                Total_SeekTime += SeekTime;
                initPos = finalPos;
            }
            if (i == queueSize - 1) {
                finalPos = tracks - 1;
                int SeekTime = abs(finalPos - initPos) * ShiftTime;
                cout << "||\t\t" << initPos << "\t\t||\t\t" << finalPos << "\t\t||\t\t" << SeekTime << "\t\t||" << endl;
                Total_SeekTime += SeekTime;
                initPos = finalPos;
            }
        }
        for (int i = min; i >= 0; i--) {
            int finalPos = requestQueue[i];
            if (finalPos >= tracks) {
                cout << "Track " << finalPos << " Not Available" << endl;
            } else {
                int SeekTime = abs(finalPos - initPos) * ShiftTime;
                cout << "||\t\t" << initPos << "\t\t||\t\t" << finalPos << "\t\t||\t\t" << SeekTime << "\t\t||" << endl;
                Total_SeekTime += SeekTime;
                initPos = finalPos;
            }
        }
    }
    
    cout << "Total Seek Time to Process Request Queue: " << Total_SeekTime << endl;

    return 0;
}


#####input
Enter the Total Number of tracks: 200
Enter the Time taken by the head to move one track to another: 5
Enter the Size of Request Queue: 8
Enter the initial position of read-write head: 50
Enter the requested Tracks: 
82 170 43 140 65 12 80 6
Select Direction: 
1)Current to Max
2)Current to Min
2
